SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
RelMLEPoly <- 1 - errorVar/SSVar
RelMLEPoly
# weight
cssemMLEPolyDat$wt <- cssemMLEPolyDat$freq / sum(cssemMLEPolyDat$freq)
# error variance
errorVar <- sum(cssemMLEPolyDat$cssemPolyk6^2 * cssemMLEPolyDat$wt)
# SS variance
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
RelMLEPoly <- 1 - errorVar/SSVar
RelMLEPoly
# cssem using Polynomial method
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, K, "MLE")$CSSEMPolyMLE
### RelMLEPoly
#rounded scale score reliability
K <- 20
# cssem using Polynomial method
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, K, "MLE")$CSSEMPolyMLE
# raw score
cssemMLEPolyDat$rawScore <- c(0:nrow(itemPara))
# raw score frequence
rawFreq <- as.data.frame(table(rowSums(rawData)))
names(rawFreq) <- c("rawScore", "freq")
# merge data
cssemMLEPolyDat <- merge(cssemMLEPolyDat, rawFreq, by = "rawScore")
# weight
cssemMLEPolyDat$wt <- cssemMLEPolyDat$freq / sum(cssemMLEPolyDat$freq)
# error variance
errorVar <- sum(cssemMLEPolyDat$cssemPolyk6^2 * cssemMLEPolyDat$wt)
# SS variance
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
RelMLEPoly <- 1 - errorVar/SSVar
RelMLEPoly
RelMLEPolyMat <- c()
## for loop
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt", sep = ""))))
RelMLEPolyMat[i] <- 1 - errorVar/SSVar
}
RelMLEPolyMat <- c()
## for loop
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyMat[i] <- 1 - errorVar/SSVar
}
RelMLEPolyMat
RelMLEPolyMat
summary(RelMLEPolyMat)
RelMLEPolyMat[RelMLEPolyMat>0]
summary(RelMLEPolyMat[RelMLEPolyMat>0])
# for loop to calculate reliability for scale score
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 2))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,2] <- 1 - errorVar/SSVar
}
summary(RelMLEPolyMat[RelMLEPolyMat>0])
RelMLEPolyDat
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,2] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
RelMLEPolyDat
# for loop to calculate reliability for scale score
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
RelMLEPolyDat
RelMLEPolyDat[RelMLEPolyMat$V1>0 && RelMLEPolyMat$V1!=0,]
RelMLEPolyDat[RelMLEPolyDat$V1>0 && RelMLEPolyDat$V1!=0,]
RelMLEPolyDat[RelMLEPolyDat$V1 > 0 && RelMLEPolyDat$V1 != 1,]
RelMLEPolyDat$V1 != 1
RelMLEPolyDat$V1 > 0
RelMLEPolyDat$V1 > 0 && RelMLEPolyDat$V1 != 1
RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1
RelMLEPolyDat[RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1,]
list("kValue" = RelMLEPolyDat$kValue, "RelMLEPoly" = RelMLEPolyDat$V1)
# select reliability values not equal to 1, and larger than 0
RelMLEPolyDat <- RelMLEPolyDat[RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1,]
# return results
return(list("kValue" = RelMLEPolyDat$kValue, "RelMLEPoly" = RelMLEPolyDat$V1))
list("kValue" = RelMLEPolyDat$kValue, "RelMLEPoly" = RelMLEPolyDat$V1)
RelIRTPoly <- function(itemPara, convTable, K, estType, rawData)
### RelMLEPoly
#rounded scale score reliability
RelIRTPoly <- function(itemPara, convTable, K, estType, rawData){
# raw score frequence
rawFreq <- as.data.frame(table(rowSums(rawData)))
names(rawFreq) <- c("rawScore", "freq")
if (estType == "MLE"){
# cssem using Polynomial method
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, K, "MLE")$CSSEMPolyMLE
# raw score
cssemMLEPolyDat$rawScore <- c(0:nrow(itemPara))
# merge data
cssemMLEPolyDat <- merge(cssemMLEPolyDat, rawFreq, by = "rawScore")
# weight
cssemMLEPolyDat$wt <- cssemMLEPolyDat$freq / sum(cssemMLEPolyDat$freq)
# SS variance
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
# for loop to calculate reliability for scale score
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
# select reliability values not equal to 1, and larger than 0
RelMLEPolyDat <- RelMLEPolyDat[RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1,]
# return results
return(list("kValue" = RelMLEPolyDat$kValue, "RelMLEPoly" = RelMLEPolyDat$V1))
}else if (estType == "EAP"){
# cssem using Polynomial method
cssemEAPPolyDat <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, K, "EAP")$CSSEMPolyEAP
# raw score
cssemEAPPolyDat$rawScore <- c(0:nrow(itemPara))
# merge data
cssemEAPPolyDat <- merge(cssemEAPPolyDat, rawFreq, by = "rawScore")
# weight
cssemEAPPolyDat$wt <- cssemEAPPolyDat$freq / sum(cssemEAPPolyDat$freq)
# SS variance
SSVar <- sum(cssemEAPPolyDat$wt * (cssemEAPPolyDat$roundedSS - weighted.mean(cssemEAPPolyDat$roundedSS, cssemEAPPolyDat$wt))^2)
# for loop to calculate reliability for scale score
RelEAPPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemEAPPolyDat$cssemPolyk", i, "^2 * cssemEAPPolyDat$wt)", sep = ""))))
RelEAPPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelEAPPolyDat$kValue <- 1:K
# select reliability values not equal to 1, and larger than 0
RelEAPPolyDat <- RelEAPPolyDat[RelEAPPolyDat$V1 > 0 & RelEAPPolyDat$V1 != 1,]
# return results
return(list("kValue" = RelEAPPolyDat$kValue, "RelEAPPoly" = RelEAPPolyDat$V1))
}else{
warning("RelIRTPolyfunction only supports MLE and EAP estimation method!")
}
}
RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
library(devtools)
library(roxygen2)
install_github("liuhuan90123/EMReliability")
install_github("liuhuan90123/EMReliability")
library(devtools)
library(roxygen2)
#1
setwd("C:\\Users\\Huan\\OneDrive - University of Iowa\\Github\\EMReliability")
#1
setwd("C:\\Users\\Huan\\OneDrive - University of Iowa\\Github")
create("EMReliability")
create("EMReliability_New")
create("EMRel")
#1
setwd("C:\\Users\\Huan\\OneDrive - University of Iowa\\Github")
create("EMRel")
#1
setwd("C:\\Users\\Huan\\OneDrive - University of Iowa\\")
create("EMRel")
library(EMReliability)
library(EMReliability)
NormalQuadraPoints(41)
library(EMReliability)
NormalQuadraPoints(41)
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "MLE")
LordWingersky(c(0.9,0.9,0.9))
install_github("liuhuan90123/EMReliability")
library(EMReliability)
## IRT Test Reliability
# help functions
source("R/NormalQuadraPoints.R") # n set as 41
NormalQuadraPoints(41)
## IRT Test Reliability
# help functions
source("R/NormalQuadraPoints.R") # n set as 41
devtools::document()
library(root)
install.packages("root")
devtools::document()
install.packages("root")
library(devtools)
install.packages(c("devtools", "roxygen2"))
library(devtools)
library(roxygen2)
library(root)
install.packages("root")
devtools::document()
library(EMReliability)
CSEMLord
library(devtools)
library(roxygen2)
library(root)
install.packages("root")
devtools::document()
NormalQuadraPoints(41)
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "MLE")
# load library
library(EMReliability)
# test help functions
NormalQuadraPoints(41)
LordWingersky(c(0.9,0.9,0.9))
# load library
library(EMReliability)
# read raw data
rawData_A <- read.table("TestData/RawDataFormX.txt")
rawData_B <- read.table("TestData/RawDataFormY.txt")
# read item parameters from txt file
itemPara_A <- read.table("TestData/ItemParaFormX.txt")
names(itemPara_A) <- c("b", "a")
itemPara_A[,"a"] <- itemPara_A[,"a"]/1.702
itemPara_B <- read.table("TestData/ItemParaFormY.txt")
names(itemPara_B) <- c("b", "a")
itemPara_B[,"a"] <- itemPara_B[,"a"]/1.702
# read conversion tables
convTable_A <- read.csv("TestData/ConversionTableFormX.csv")
convTable_A$roundedSS <- round(convTable_A$unroundedSS)
convTable_B <- read.csv("TestData/ConversionTableFormY.csv")
convTable_B$roundedSS <- round(convTable_B$unroundedSS)
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "MLE")
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
CronbachAlpha_A <- CronbachAlpha(rawData_A)
CronbachAlpha_A
CronbachAlpha_B <- CronbachAlpha(rawData_B)
CronbachAlpha_B
Feldt_A <- Feldt(rawData_A)
Feldt_A
Feldt_B <- Feldt(rawData_B)
Feldt_B
TestRelIRT_A <- TestRelIRT(itemPara_A)
TestRelIRT_A
TestRelIRT_B <- TestRelIRT(itemPara_B)
TestRelIRT_B
TestRelIRT_A <- TestRelIRT(itemPara_A)
TestRelIRT_A
TestRelIRT_B <- TestRelIRT(itemPara_B)
TestRelIRT_B
library(EMReliability)
TestRelIRT_A <- TestRelIRT(itemPara_A)
TestRelIRT_A
TestRelIRT_B <- TestRelIRT(itemPara_B)
TestRelIRT_B
library(EMReliability)
TestRelIRT_A <- TestRelIRT(itemPara_A)
TestRelIRT_A
TestRelIRT_B <- TestRelIRT(itemPara_B)
TestRelIRT_B
# marginal reliability MLE
MarginalRelMLE_A <- MarginalRelIRT(itemPara_A, "MLE")
MarginalRelMLE_A
MarginalRelMLE_B <- MarginalRelIRT(itemPara_B, "MLE")
MarginalRelMLE_B
# marginal reliability EAP
MarginalRelEAP_A <- MarginalRelIRT(itemPara_A, "EAP")
MarginalRelEAP_A
MarginalRelEAP_B <- MarginalRelIRT(itemPara_B, "EAP")
MarginalRelEAP_B
# Kolen's method
KolenRelIRT_A <- KolenRelIRT(itemPara_A, convTable_A)
KolenRelIRT_A
KolenRelIRT_B <- KolenRelIRT(itemPara_B, convTable_B)
KolenRelIRT_B
convTable_A_Poly <- convTable_A[,c("theta", "roundedSS")]
convTable_B_Poly <- convTable_B[,c("theta", "roundedSS")]
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
RelEAPPoly_B
csemLord <- CSEMLord(40)
csemLord
csemBinomial <- CSSEMBinomial(40, convTable_A)
csemBinomial
numOfItem <- 40
convTable_A_sub <- convTable_A[,c("rawScore", "roundedSS")]
convTable_B_sub <- convTable_B[,c("rawScore", "roundedSS")]
CSSEMPolynomial(numOfItem, convTable_A_sub, 15)
CSSEMPolynomial(numOfItem, convTable_B_sub, 15)
CSSEMMLEPoly(itemPara_A, convTable_A, 20)
# CSSEM IRT Poly
CSSEMIRTPoly(itemPara_A, convTable_A, 20, "MLE")
CSSEMIRTPoly(itemPara_B, convTable_B, 20, "MLE")
# CSSEM EAP Poly
CSSEMIRTPoly(itemPara_A, convTable_A, 20, "EAP")
CSSEMIRTPoly(itemPara_B, convTable_B, 20, "EAP")
convTable_A_Poly
convTable_A
# CSEM MLE
csemMLE_A <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_A, "MLE")
csemMLE_A
csemMLE_B <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_B, "MLE")
csemMLE_B
csemEAP_A <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
csemEAP_A
csemEAP_B <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_B, "EAP")
csemEAP_B
csemBinomial_A <- CSSEMBinomial(40, convTable_A)
csemBinomial_A
csemBinomial_B <- CSSEMBinomial(40, convTable_B)
csemBinomial_B
cssemPolynomial_A <- CSSEMPolynomial(numOfItem, convTable_A_sub, 20)
cssemPolynomial_A
cssemPolynomial_B <- CSSEMPolynomial(numOfItem, convTable_B_sub, 20)
cssemPolynomial_B
# CSSEM Kolen's Method
cssemKolen_A <- CSSEMKolen(itemPara_A, convTable_A)
cssemKolen_A
cssemKolen_B <- CSSEMKolen(itemPara_B, convTable_B)
cssemKolen_B
# CSSEM IRT MLE Polynomial
cssemMLEPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE")
cssemMLEPoly_A
cssemMLEPoly_B <- CSSEMIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE")
cssemMLEPoly_B
# CSSEM IRT EAP Polynomial
cssemEAPPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP")
cssemEAPPoly_A
cssemEAPPoly_B <- CSSEMIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP")
cssemEAPPoly_B
RelMLEPoly_A
RelMLEPoly_B
RelEAPPoly_A
RelEAPPoly_B
cssemKolen <- as.data.frame(cssemKolen)
### Plot Kolen CSSEM  ---------------------------------------------------------------------------
cssemKolen_A <- as.data.frame(cssemKolen_A)
cssemKolen_A
library(ggplot2)
ggplot(cssemKolen, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100,  130, 5)) +
scale_y_continuous(name = "CSSEM_Kolen IRT Method") +
theme_bw()
ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100,  130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method") +
theme_bw()
plot(cssemKolen_A$trueScaleScore, cssemKolen_A$cssemKolen)
ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 3, 0.5)) +
theme_bw()
ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 3, 0.5)) +
theme_bw()
ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 4, 0.5)) +
theme_bw()
ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 4, 0.5),
limits = c(0,4)) +
theme_bw()
ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 2) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
devtools::document()
library(EMReliability)
install_github("liuhuan90123/EMReliability")
plot(csemLord)
### Results for project ------------------
# source("R/NormalQuadraPoints.R") # n set as 41
# source("R/Info.R")
# source("R/LordWingersky.R")
# source("R/CronbachAlpha.R") # raw data
# source("R/Feldt.R")
# source("R/MarginalRelMLE.R") # itemPara
# source("R/MarginalRelEAP.R") # itemPara
# source("R/TestRelIRT.R") # itemPara
# source("R/KolenRelIRT.R") # itemPara, convTable
# source("R/CSEMLord.R") # numer of item
# source("R/PolynomialMethod.R") # cssemDat, K=num of degree
# source("R/CSSEMPolynomial.R") # numOfItem, convTable, K
# source("R/CSEMLord.R") # number of item
# source("R/CSSEMMLEPoly.R") # itemPara, convTable, K
# source("R/CSSEMEAPPoly.R") # itemPara, convTable, K
# source("R/CSEMLord.R") # numer of item
# source("R/CSSEMBinomial.R") # numer of item
# source("R/CSSEMPolynomial.R") # numOfItem, convTable, K
# source("R/CSEMIRT.R") # itemPara
# source("R/CSSEMIRT.R") # itemPara, convTable
# load library
library(EMReliability)
# read raw data
rawData_A <- read.table("TestData/RawDataFormX.txt")
rawData_B <- read.table("TestData/RawDataFormY.txt")
# read item parameters from txt file
itemPara_A <- read.table("TestData/ItemParaFormX.txt")
names(itemPara_A) <- c("b", "a")
itemPara_A[,"a"] <- itemPara_A[,"a"]/1.702
itemPara_B <- read.table("TestData/ItemParaFormY.txt")
names(itemPara_B) <- c("b", "a")
itemPara_B[,"a"] <- itemPara_B[,"a"]/1.702
# read conversion tables
convTable_A <- read.csv("TestData/ConversionTableFormX.csv")
convTable_A$roundedSS <- round(convTable_A$unroundedSS)
convTable_B <- read.csv("TestData/ConversionTableFormY.csv")
convTable_B$roundedSS <- round(convTable_B$unroundedSS)
convTable_A_Poly <- convTable_A[,c("theta", "roundedSS")]
convTable_B_Poly <- convTable_B[,c("theta", "roundedSS")]
# test help functions ------------------------------------
NormalQuadraPoints(41)
LordWingersky(c(0.9,0.9,0.9))
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
# CronbachAlpha & GT
CronbachAlpha_A <- CronbachAlpha(rawData_A)
CronbachAlpha_A
CronbachAlpha_B <- CronbachAlpha(rawData_B)
CronbachAlpha_B
# Feldt
Feldt_A <- Feldt(rawData_A)
Feldt_A
Feldt_B <- Feldt(rawData_B)
Feldt_B
# test reliability IRT
TestRelIRT_A <- TestRelIRT(itemPara_A)
TestRelIRT_A
TestRelIRT_B <- TestRelIRT(itemPara_B)
TestRelIRT_B
# marginal reliability MLE
MarginalRelMLE_A <- MarginalRelIRT(itemPara_A, "MLE")
MarginalRelMLE_A
MarginalRelMLE_B <- MarginalRelIRT(itemPara_B, "MLE")
MarginalRelMLE_B
# marginal reliability EAP
MarginalRelEAP_A <- MarginalRelIRT(itemPara_A, "EAP")
MarginalRelEAP_A
MarginalRelEAP_B <- MarginalRelIRT(itemPara_B, "EAP")
MarginalRelEAP_B
# Kolen's method
KolenRelIRT_A <- KolenRelIRT(itemPara_A, convTable_A)
KolenRelIRT_A
KolenRelIRT_B <- KolenRelIRT(itemPara_B, convTable_B)
KolenRelIRT_B
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
RelEAPPoly_B
### CSEM --------------------------------------------------------------
# CSEM Lord
csemLord <- CSEMLord(40)
csemLord
# CSEM MLE
csemMLE_A <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_A, "MLE")
csemMLE_A
csemMLE_B <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_B, "MLE")
csemMLE_B
# CSEM EAP
csemEAP_A <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
csemEAP_A
csemEAP_B <- CSEMIRT(NormalQuadraPoints(41)$nodes, itemPara_B, "EAP")
csemEAP_B
### CSSEM -------------------------------------------------------------
# CSSEM Binomial
csemBinomial_A <- CSSEMBinomial(40, convTable_A)
csemBinomial_A
csemBinomial_B <- CSSEMBinomial(40, convTable_B)
csemBinomial_B
# CSSEM Polynomial
# number of item
numOfItem <- 40
convTable_A_sub <- convTable_A[,c("rawScore", "roundedSS")]
convTable_B_sub <- convTable_B[,c("rawScore", "roundedSS")]
cssemPolynomial_A <- CSSEMPolynomial(numOfItem, convTable_A_sub, 20)
cssemPolynomial_A
cssemPolynomial_B <- CSSEMPolynomial(numOfItem, convTable_B_sub, 20)
cssemPolynomial_B
# CSSEM Kolen's Method
cssemKolen_A <- CSSEMKolen(itemPara_A, convTable_A)
cssemKolen_A
cssemKolen_B <- CSSEMKolen(itemPara_B, convTable_B)
cssemKolen_B
# CSSEM IRT MLE Polynomial
cssemMLEPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE")
cssemMLEPoly_A
cssemMLEPoly_B <- CSSEMIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE")
cssemMLEPoly_B
# CSSEM IRT EAP Polynomial
cssemEAPPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP")
cssemEAPPoly_A
cssemEAPPoly_B <- CSSEMIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP")
cssemEAPPoly_B
### Plot function
library(ggplot2)
plot(csemLord)
csemLord
plot(csemLord$rawScore, csem$csemLord)
plot(csemLord$rawScore, csemLord$csemLord)
