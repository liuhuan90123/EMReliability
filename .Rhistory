cssemDatAggre <- as.data.frame(apply(cssemDat[,c(-1)], 2, function(x) aggregate(x, by=list(Category=cssemDat$roundedSS), FUN=function(x){sqrt(sum(x^2)/length(x))})))
cssemDatAggre <- cssemDatAggre[,c(1, seq(2, 2*(k-1), 2))]
### plot all ks ---------------------------------------------------
cssemDatLong <- reshape(cssemDatAggre,
direction = "long",
varying = list(names(cssemDatAggre)[2:k]),
v.names = "cssempoly",
idvar = c("cssemPolyk1.Category"),
timevar = "Kvalue",
times = 1:(k-1))
ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP")$"CSSEMPolyEAP"
cssemDat <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP")$"CSSEMPolyEAP"
k <- 10 # test,
cssemDat <- cssemDat[,c(3,5:(5+k-2))]
cssemDatAggre <- as.data.frame(apply(cssemDat[,c(-1)], 2, function(x) aggregate(x, by=list(Category=cssemDat$roundedSS), FUN=function(x){sqrt(sum(x^2)/length(x))})))
cssemDatAggre <- cssemDatAggre[,c(1, seq(2, 2*(k-1), 2))]
### plot all ks ---------------------------------------------------
cssemDatLong <- reshape(cssemDatAggre,
direction = "long",
varying = list(names(cssemDatAggre)[2:k]),
v.names = "cssempoly",
idvar = c("cssemPolyk1.Category"),
timevar = "Kvalue",
times = 1:(k-1))
ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
cssemDat <- CSSEMIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP")$"CSSEMPolyEAP"
k <- 5 # test, accepted maximum + 1 # when ploting, set k = 10 by judgement
# aggregate
cssemDat <- cssemDat[,c(3,5:(5+k-2))]
cssemDatAggre <- as.data.frame(apply(cssemDat[,c(-1)], 2, function(x) aggregate(x, by=list(Category=cssemDat$roundedSS), FUN=function(x){sqrt(sum(x^2)/length(x))})))
cssemDatAggre <- cssemDatAggre[,c(1, seq(2, 2*(k-1), 2))]
### plot all ks ---------------------------------------------------
cssemDatLong <- reshape(cssemDatAggre,
direction = "long",
varying = list(names(cssemDatAggre)[2:k]),
v.names = "cssempoly",
idvar = c("cssemPolyk1.Category"),
timevar = "Kvalue",
times = 1:(k-1))
ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
# plot CSEM Lord
plot(csemLord$rawScore, csemLord$csemLord)
ggplot(csemLord, aes(x = rawScore, y = cssemlord)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Raw Score", breaks  = seq(0, 40, 5)) +
scale_y_continuous(name = "CSEM Lord Method", breaks  = seq(0, 4, 0.5),
limits = c(0,4)) +
theme_bw()
# ggplot
csemLord <- as.data.frame(csemLord)
ggplot(csemLord, aes(x = rawScore, y = cssemlord)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Raw Score", breaks  = seq(0, 40, 5)) +
scale_y_continuous(name = "CSEM Lord Method", breaks  = seq(0, 4, 0.5),
limits = c(0,4)) +
theme_bw()
ggplot(csemLord, aes(x = rawScore, y = csemlord)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Raw Score", breaks  = seq(0, 40, 5)) +
scale_y_continuous(name = "CSEM Lord Method", breaks  = seq(0, 4, 0.5),
limits = c(0,4)) +
theme_bw()
ggplot(csemLord, aes(x = rawScore, y = csemLord)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Raw Score", breaks  = seq(0, 40, 5)) +
scale_y_continuous(name = "CSEM Lord Method", breaks  = seq(0, 4, 0.5),
limits = c(0,4)) +
theme_bw()
png("csemLord.png",  width = 799, height = 596)
L <- ggplot(csemLord, aes(x = rawScore, y = csemLord)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Raw Score", breaks  = seq(0, 40, 5)) +
scale_y_continuous(name = "CSEM Lord Method", breaks  = seq(0, 4, 0.5),
limits = c(0,4)) +
theme_bw()
print(L)
dev.off()
# plot CSEM MLE/EAP -------------------------------------------------
plot(csemMLE_A$theta, csemMLE_A$csemMLE)
ggplot(csemMLE_A, aes(x = theta, y = csemMLE)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM MLE", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
# ggplot
csemMLE_A <- as.data.frame(csemMLE_A)
ggplot(csemMLE_A, aes(x = theta, y = csemMLE)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM MLE", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
csemEAP_A <- as.data.frame(csemEAP_A)
ggplot(csemEAP_A, aes(x = theta, y = csemEAP)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM EAP", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
ggplot(csemEAP_B, aes(x = theta, y = csemEAP)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM EAP", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
csemEAP_B <- as.data.frame(csemEAP_B)
ggplot(csemEAP_B, aes(x = theta, y = csemEAP)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM EAP", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
# plot CSEM MLE/EAP -------------------------------------------------
plot(csemMLE_A$theta, csemMLE_A$csemMLE)
plot(csemMLE_B$theta, csemMLE_B$csemMLE)
plot(csemEAP_A$theta, csemEAP_A$csemEAP)
plot(csemEAP_B$theta, csemEAP_B$csemEAP)
# ggplot
# MLE -----------------
csemMLE_A <- as.data.frame(csemMLE_A)
png("csemMLE_A.png",  width = 799, height = 596)
csemMLE_A_P <- ggplot(csemMLE_A, aes(x = theta, y = csemMLE)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM MLE", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(csemMLE_A_P)
dev.off()
csemMLE_B <- as.data.frame(csemMLE_B)
png("csemMLE_B.png",  width = 799, height = 596)
csemMLE_B_P <- ggplot(csemMLE_B, aes(x = theta, y = csemMLE)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM MLE", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(csemMLE_B_P)
dev.off()
# EAP -------------
csemEAP_A <- as.data.frame(csemEAP_A)
png("csemEAP_A.png",  width = 799, height = 596)
csemEAP_A_P <- ggplot(csemEAP_A, aes(x = theta, y = csemEAP)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM EAP", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(csemEAP_A_P)
dev.off()
csemEAP_B <- as.data.frame(csemEAP_B)
png("csemEAP_B.png",  width = 799, height = 596)
csemEAP_B_P <- ggplot(csemEAP_B, aes(x = theta, y = csemEAP)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Theta", breaks  = seq(-5, 5, 1)) +
scale_y_continuous(name = "CSSEM EAP", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(csemEAP_B_P)
dev.off()
cssemKolen_B <- as.data.frame(cssemKolen_B)
ggplot(cssemKolen_B, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
cssemKolen_A <- as.data.frame(cssemKolen_A)
png("CSSEM_KolenIRT_A.png",  width = 799, height = 596)
KA <- ggplot(cssemKolen_A, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(KA)
dev.off()
cssemKolen_B <- as.data.frame(cssemKolen_B)
png("CSSEM_KolenIRT_B.png",  width = 799, height = 596)
KB <- ggplot(cssemKolen_B, aes(x = trueScaleScore, y = cssemKolen)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "True Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Kolen's IRT Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(KB)
dev.off()
plot(cssemBinomial_A_Aggre$roundedSS, cssemBinomial_A_Aggre$cssemBinomial)
plot(cssemBinomial_B_Aggre$roundedSS, cssemBinomial_B_Aggre$cssemBinomial)
cssemBinomial_A_Aggre
ggplot(cssemBinomial_A_Aggre, aes(x = roundedSS, y = cssemBinomial)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Binomial Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
png("CSSEM_Binomial_A.png",  width = 799, height = 596)
CSSEM_Binomial_A_P <- ggplot(cssemBinomial_A_Aggre, aes(x = roundedSS, y = cssemBinomial)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Binomial Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(CSSEM_Binomial_A_P)
dev.off()
png("CSSEM_Binomial_B.png",  width = 799, height = 596)
CSSEM_Binomial_B_P <- ggplot(cssemBinomial_B_Aggre, aes(x = roundedSS, y = cssemBinomial)) +
geom_point(size = 1.5) +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Binomial Method", breaks  = seq(0, 3, 0.5),
limits = c(0,3)) +
theme_bw()
print(CSSEM_Binomial_B_P)
dev.off()
cssemDat <- CSSEMPolynomial(40, convTable_A_sub, 20)$"CSSEMPolynomial"
k <- 13 # test, accepted maximum + 1
### aggregate many to one ------------
cssemDat <- cssemDat[,c(3,5:(5+k-2))]
cssemDatAggre <- as.data.frame(apply(cssemDat[,c(-1)], 2, function(x) aggregate(x, by=list(Category=cssemDat$roundedSS), FUN=function(x){sqrt(sum(x^2)/length(x))})))
cssemDatAggre <- cssemDatAggre[,c(1, seq(2, 2*(k-1), 2))]
### plot all ks ---------------------------------------------------
cssemDatLong <- reshape(cssemDatAggre,
direction = "long",
varying = list(names(cssemDatAggre)[2:k]),
v.names = "cssempoly",
idvar = c("cssemPolyk1.Category"),
timevar = "Kvalue",
times = 1:(k-1))
ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
png("CSSEM_poly_A.png",  width = 799, height = 596)
CSSEM_poly_A_P <- ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
print(CSSEM_poly_A_P)
dev.off()
cssemDat <- CSSEMPolynomial(40, convTable_B_sub, 20)$"CSSEMPolynomial"
k <- 13 # test, accepted maximum + 1
### aggregate many to one ------------
cssemDat <- cssemDat[,c(3,5:(5+k-2))]
cssemDatAggre <- as.data.frame(apply(cssemDat[,c(-1)], 2, function(x) aggregate(x, by=list(Category=cssemDat$roundedSS), FUN=function(x){sqrt(sum(x^2)/length(x))})))
cssemDatAggre <- cssemDatAggre[,c(1, seq(2, 2*(k-1), 2))]
### plot all ks ---------------------------------------------------
cssemDatLong <- reshape(cssemDatAggre,
direction = "long",
varying = list(names(cssemDatAggre)[2:k]),
v.names = "cssempoly",
idvar = c("cssemPolyk1.Category"),
timevar = "Kvalue",
times = 1:(k-1))
ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
png("CSSEM_poly_B.png",  width = 799, height = 596)
CSSEM_poly_B_P <- ggplot(cssemDatLong, aes(x = cssemPolyk1.Category, y = cssempoly, color = factor(Kvalue))) +
geom_point() +
scale_x_continuous(name = "Rounded Scale Score", breaks  = seq(100, 130, 5)) +
scale_y_continuous(name = "CSSEM Polynomial Method") +
geom_line() +
theme_bw() +
labs(colour="K value")
print(CSSEM_poly_B_P)
dev.off()
CSEMLord(numOfItem)
# merge with converstion table
cssemDat <- merge(csemLordDat, convTable, by = "rawScore")
# change variable name
names(cssemDat)[names(cssemDat) == 'csemLord'] <- 'csem'
# csem Lord
csemLordDat <- CSEMLord(numOfItem)
# merge with converstion table
cssemDat <- merge(csemLordDat, convTable, by = "rawScore")
# change variable name
names(cssemDat)[names(cssemDat) == 'csemLord'] <- 'csem'
# csem Lord
csemLordDat <- CSEMLord(numOfItem)
# merge with converstion table
cssemDat <- merge(csemLordDat, convTable_A_Poly, by = "rawScore")
# change variable name
names(cssemDat)[names(cssemDat) == 'csemLord'] <- 'csem'
csemLordDat
convTable_A_Poly
convTable_A
# merge with converstion table
cssemDat <- merge(csemLordDat, convTable_A_sub, by = "rawScore")
# change variable name
names(cssemDat)[names(cssemDat) == 'csemLord'] <- 'csem'
modelK <- lm(roundedSS ~ poly(rawScore, 3, raw=TRUE), cssemDat)
modelK
lines(sort(rawScore), fitted(modelK)[order(rawScore)], col='red', type='b')
fitted(modelK)
library(ggplot2)
prd <- data.frame(hp = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
View(prd)
err <- predict(modelK, newdata = prd, se.modelK = TRUE)
err
err$fit
predict(modelK, newdata = prd, se.modelK = TRUE)
prd
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
prd
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line()
cssemDat
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
modelK <- lm(roundedSS ~ poly(rawScore, 5, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
modelK <- lm(roundedSS ~ poly(rawScore, 2, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
modelK <- lm(roundedSS ~ poly(rawScore, 10, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
modelK <- lm(roundedSS ~ poly(rawScore, 3, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
library(ggplot2)
modelK <- lm(roundedSS ~ poly(rawScore, 7, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
modelK <- lm(roundedSS ~ poly(rawScore, 3, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
library(ggplot2)
modelK <- lm(roundedSS ~ poly(rawScore, 10, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
library(ggplot2)
modelK <- lm(roundedSS ~ poly(rawScore, 3, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
# csem Lord
csemLordDat <- CSEMLord(numOfItem)
# merge with converstion table
cssemDat <- merge(csemLordDat, convTable_A_sub, by = "rawScore")
# change variable name
names(cssemDat)[names(cssemDat) == 'csemLord'] <- 'csem'
library(ggplot2)
modelK <- lm(roundedSS ~ poly(rawScore, 3, raw=TRUE), cssemDat)
prd <- data.frame(rawScore = seq(from = range(cssemDat$rawScore)[1], to = range(cssemDat$rawScore)[2], length.out = 100))
prd$predictedSS <- predict(modelK, newdata = prd, se.modelK = TRUE)
ggplot(prd, aes(x = rawScore, y = predictedSS)) +
theme_bw() +
geom_line() +
geom_point(data = cssemDat, aes(x = rawScore, y = roundedSS))
itemPara <- itemPara_A # test
View(itemPara)
if (col(itemPara) == 3){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b", "a", "c")
}
col(itemPara)
if (ncol(itemPara) == 3){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b", "a", "c")
}
if (ncol(itemPara) == 2){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b", "a")
itemPara$c <- 0
}
if (ncol(itemPara) == 1){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b")
itemPara$a <- 1
itemPara$c <- 0
}
# replicate item parameter and theta
itemParaRep <-itemPara[rep(seq_len(nrow(itemPara)), each = length(theta)),]
theta <- NormalQuadraPoints(41)$nodes
# replicate item parameter and theta
itemParaRep <-itemPara[rep(seq_len(nrow(itemPara)), each = length(theta)),]
itemParaRep$theta <- rep(theta, each = 1, length.out = length(theta)*nrow(itemPara))
View(itemParaRep)
# calculate information by theta
itemParaRep <- within(itemParaRep, {
P = 0 + (1 - 0) / (1 + exp(-1.702 * a * (theta - b)))
Q = 1 - P
PQ = P * Q
info = 1.702**2 * a**2 * P * Q
})
itemParaInfo <- aggregate(itemParaRep$info, by=list(Category=itemParaRep$theta), FUN=sum)
names(itemParaInfo) <- c("theta", "infoMLE")
# calculate info for EAP
itemParaInfo$infoEAP <- itemParaInfo$infoMLE + 1 # cobtributed by population
View(itemParaInfo)
itemPara <- itemPara_A # test
theta <- NormalQuadraPoints(41)$nodes
if (ncol(itemPara) == 3){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b", "a", "c")
}
if (ncol(itemPara) == 2){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b", "a")
itemPara$c <- 0
}
if (ncol(itemPara) == 1){
#  item parameters should be on the 1.702 metric
names(itemPara) <- c("b")
itemPara$a <- 1
itemPara$c <- 0
}
# replicate item parameter and theta
itemParaRep <-itemPara[rep(seq_len(nrow(itemPara)), each = length(theta)),]
itemParaRep$theta <- rep(theta, each = 1, length.out = length(theta)*nrow(itemPara))
itemParaRep <- within(itemParaRep, {
P = c + (1 - c) / (1 + exp(-1.702 * a * (theta - b)))
Q = 1 - P
PQ = P * Q
info = 1.702**2 * a**2 * (Q/P) * (P-c)^2 / (1-c)^2
})
# sum information by theta
itemParaInfo <- aggregate(itemParaRep$info, by=list(Category=itemParaRep$theta), FUN=sum)
names(itemParaInfo) <- c("theta", "infoMLE")
# calculate info for EAP
itemParaInfo$infoEAP <- itemParaInfo$infoMLE + 1 # cobtributed by population
# return info for each theta
library(EMReliability)
library(EMReliability)
library(devtools)
install_github("liuhuan90123/EMReliability")
# load library
library(EMReliability)
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
NormalQuadraPoints(41)$nodes
itemPara_A
NormalQuadraPoints(41)
library(EMReliability)
library(EMReliability)
# test help functions ------------------------------------
NormalQuadraPoints(41)
LordWingersky(c(0.9,0.9,0.9))
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
