varianceTrueY
varianceObsY
TestRelBFMIRT
varianceErrorSS
varianceTrueYSS
varianceObsYSS
TestRelBFMIRTSS
VarandRel <- as.data.frame(matrix(c(varianceError, varianceTrueY, varianceObsY, TestRelBFMIRT,
varianceErrorSS, varianceTrueYSS, varianceObsYSS, TestRelBFMIRTSS
)))
rownames(VarandRel) <- c("Overall error variance for raw scores",
"True score variance for raw scores",
"Observed score variance for raw scores",
"Reliability for raw scores",
"Overall error variance for scale scores",
"True score variance for scale scores",
"Observed score variance for scale scores",
"Reliability for scale scores")
colnames(VarandRel) <- "coefficient"
VarandRel
conditionalSEMs <- nodesM[,c("thetag", "theta2", "theta3", "theta4", "weightsWtd","weightedMean", "varianceY", "weightedMeanSS", "varianceYSS")]
names(conditionalSEMs) <- c("Thetag", "Theta2", "Theta3", "Theta4", "weights","Ex_Raw", "Raw_Variance", "Ex_Scale", "Scale_Variance")
conditionalSEMs$Raw_CSEM <- sqrt(conditionalSEMs$Raw_Variance)
conditionalSEMs$Scale_CSEM <- sqrt(conditionalSEMs$Scale_Variance)
conditionalSEMs <- conditionalSEMs[with(conditionalSEMs, order(Thetag, Theta2, Theta3, Theta4)), ]
rownames(conditionalSEMs) <- 1:nrow(conditionalSEMs)
conditionalSEMs
# return(list("Variance and Reliability" = VarandRel,
#             "Conditional SEMs" = conditionalSEMs[,c("Theta1", "Theta2", "Theta3", "weights",
#                                                     "Ex_Raw", "Ex_Scale", "Raw_CSEM", "Scale_CSEM")]))
# Form A
# > VarandRel
#                                           coefficient
# Overall error variance for raw scores      5.2842179
# True score variance for raw scores        15.3932347
# Observed score variance for raw scores    20.6774526
# Reliability for raw scores                 0.7444454
# Overall error variance for scale scores    4.4141167
# True score variance for scale scores      11.7296405
# Observed score variance for scale scores  16.1437571
# Reliability for scale scores               0.7265744
# Form B
# > VarandRel
#                                          coefficient
# Overall error variance for raw scores      5.2806124
# True score variance for raw scores        14.0073056
# Observed score variance for raw scores    19.2879179
# Reliability for raw scores                 0.7262218
# Overall error variance for scale scores    4.5397396
# True score variance for scale scores      11.0183305
# Observed score variance for scale scores  15.5580701
# Reliability for scale scores               0.7082068
# library(xlsx)
# write.xlsx(conditionalSEMs, "conditionalSEMs_BF_A.xlsx")
varianceObsY
View(itemParaAggr1)
ï¼ŸFX_BF
?FX_BF
??FX_BF
View(FX_BF)
# library(LaplacesDemon)
library(profvis)
# source("R/NormalQuadraPoints.R")
# source("R/LordWingersky.R")
library(mvtnorm)
if(!require(mvtnorm)) install.packages("mvtnorm")
library(mvtnorm)
######## BI-Factor Full Approach 2 ------------------------------------
# read item parameters conversion tables from txt file
# Form A
itemPara_BF <- read.table("TestData/SpanishLit_prm_A_BF.txt")[,c(7:11)]
convTable_A <- read.csv("TestData/conversion_table_Form A.csv")
convTable_A <- convTable_A[1:32, c("RawScore", "roundedSS")]
names(convTable_A) <- c("y","roundedSS")
convTable <- convTable_A
# Form B
# itemPara_BF <- read.table("TestData/SpanishLit_prm_B_BF.txt")[,c(7:11)]
# convTable_B <- read.csv("TestData/conversion_table_Form B.csv")
# convTable_B <- convTable_B[1:32, c("RawScore", "roundedSS")]
# names(convTable_B) <- c("y","roundedSS")
# convTable <- convTable_B
strat <- c(13, 12, 6)
names(itemPara_BF) <- c("b", "ag","a1","a2", "a3") # ag is primary
itemPara_BF$ai <- c(itemPara_BF$a1[1:13], itemPara_BF$a2[14:25], itemPara_BF$a3[26:31])
# num of items
numOfItem <- nrow(itemPara_BF)
# num of quadratures
numOfQuad <- 11
# set nodes ranging from -4 to 4
nodes <- seq(-4, 4, length.out = numOfQuad)
nodesM <- as.matrix(expand.grid(nodes,nodes,nodes, nodes))
weightsUnwtd <- dmvnorm(nodesM, c(0,0,0,0), diag(4), log=FALSE) # 41^3
nodesM <- as.data.frame(nodesM)
nodesM$weightsWtd <- weightsUnwtd / sum(weightsUnwtd)
itemPara1 <- itemPara_BF[1:13, c("b", "ag", "ai")]
itemPara2 <- itemPara_BF[14:25, c("b", "ag", "ai")]
itemPara3 <- itemPara_BF[26:31, c("b", "ag", "ai")]
# itemPara <- itemPara1
FX_BF_Item <- function(itemPara){
NormalQuadraPoints <- function(n){
# set nodes ranging from -4 to 4
nodes <- seq(-4, 4, length.out = n)
# unnormalized weights
weightsUnwtd <- sapply(nodes, FUN = function(x) dnorm(x))
# normalized weightes
weightsWtd <- weightsUnwtd / sum(weightsUnwtd)
# return nodes and normalized weights
return(list("nodes" = nodes, "weights" = weightsWtd))
}
# transform item parameters to the logistic metric
names(itemPara) <- c("b", "ag", "ai")
# num of items
numOfItem <- nrow(itemPara)
# num of quadratures
# numOfQuad <- numOfQuad^2
# weights and nodes
quadPoints <- expand.grid(NormalQuadraPoints(numOfQuad)$nodes, NormalQuadraPoints(numOfQuad)$nodes)
# quadPoints <- nodes
# replicate item parameter and theta
itemParaRep <-itemPara[rep(seq_len(numOfItem), each = numOfQuad^2),]
itemParaRep$thetag <- rep(quadPoints[,c(1)], each = 1, length.out = numOfQuad^2*numOfItem)
itemParaRep$thetai <- rep(quadPoints[,c(2)], each = 1, length.out = numOfQuad^2*numOfItem)
# calculate information by theta
itemParaRep <- within(itemParaRep, {
P = 0 + (1 - 0) / (1 + exp(-(ag*thetag + ai*thetai + b)))
Q = 1 - P
PQ = P * Q
# info = 1.702**2 * a**2 * P * Q
})
# set nodes ranging from -4 to 4
nodes <- seq(-4, 4, length.out = numOfQuad)
nodes2 <- as.matrix(expand.grid(nodes,nodes))
weightsUnwtd2 <- dmvnorm(nodes2, c(0,0), diag(2), log=FALSE) # 41^3
nodes2 <- as.data.frame(nodes2)
nodes2$weightsWtd2 <- weightsUnwtd2 / sum(weightsUnwtd2)
# itemParaRep <- itemParaRep[order(itemParaRep$b),]
itemParaRep$wt <- nodes2$weightsWtd2
itemParaRep$PQwtd <- itemParaRep$wt * itemParaRep$PQ
itemParaRep$Pwtd <- itemParaRep$wt * itemParaRep$P
itemParaAggr <- aggregate(.~ b, data = itemParaRep, FUN = sum)
itemParaAggr
}
FX_BF_Strat <- function(itemPara){
NormalQuadraPoints <- function(n){
# set nodes ranging from -4 to 4
nodes <- seq(-4, 4, length.out = n)
# unnormalized weights
weightsUnwtd <- sapply(nodes, FUN = function(x) dnorm(x))
# normalized weightes
weightsWtd <- weightsUnwtd / sum(weightsUnwtd)
# return nodes and normalized weights
return(list("nodes" = nodes, "weights" = weightsWtd))
}
# transform item parameters to the logistic metric
names(itemPara) <- c("b", "ag", "ai")
# num of items
numOfItem <- nrow(itemPara)
# num of quadratures
# numOfQuad <- numOfQuad^2
# weights and nodes
quadPoints <- expand.grid(NormalQuadraPoints(numOfQuad)$nodes, NormalQuadraPoints(numOfQuad)$nodes)
# quadPoints <- nodes
# replicate item parameter and theta
itemParaRep <-itemPara[rep(seq_len(numOfItem), each = numOfQuad^2),]
itemParaRep$thetag <- rep(quadPoints[,c(1)], each = 1, length.out = numOfQuad^2*numOfItem)
itemParaRep$thetai <- rep(quadPoints[,c(2)], each = 1, length.out = numOfQuad^2*numOfItem)
# calculate information by theta
itemParaRep <- within(itemParaRep, {
P = 0 + (1 - 0) / (1 + exp(-(ag*thetag + ai*thetai + b)))
Q = 1 - P
PQ = P * Q
# info = 1.702**2 * a**2 * P * Q
})
# set nodes ranging from -4 to 4
nodes <- seq(-4, 4, length.out = numOfQuad)
nodes2 <- as.matrix(expand.grid(nodes,nodes))
weightsUnwtd2 <- dmvnorm(nodes2, c(0,0), diag(2), log=FALSE) # 41^3
nodes2 <- as.data.frame(nodes2)
nodes2$weightsWtd2 <- weightsUnwtd2 / sum(weightsUnwtd2)
# itemParaRep <- itemParaRep[order(itemParaRep$b),]
# itemParaRep$weights <- nodes2$weightsWtd2
# itemParaRep$PQwtd <- itemParaRep$wt * itemParaRep$PQ
# itemParaRep$Pwtd <- itemParaRep$wt * itemParaRep$P
itemParaAggr <- aggregate(.~ thetag + thetai , data = itemParaRep, FUN = sum)
itemParaAggr
## true score variance approach
# true score variance
# sum probability by theta
# itemParaAggr <- aggregate(itemParaRep, by=list(Category=itemParaRep$theta), FUN=sum)
# add weights for each theta
itemParaAggr$weights <- nodes2$weightsWtd2
# calculate true score variance
varianceTrue <- sum((itemParaAggr$P)^2 * itemParaAggr$weights) - (sum(itemParaAggr$P * itemParaAggr$weights))^2
# error variance
# claculate error variance
varianceError <- sum(itemParaAggr$PQ * itemParaAggr$weights)
varianceX <- varianceTrue + varianceError
varianceX
}
FX_BF_Pi <- function(itemPara){
NormalQuadraPoints <- function(n){
# set nodes ranging from -4 to 4
nodes <- seq(-4, 4, length.out = n)
# unnormalized weights
weightsUnwtd <- sapply(nodes, FUN = function(x) dnorm(x))
# normalized weightes
weightsWtd <- weightsUnwtd / sum(weightsUnwtd)
# return nodes and normalized weights
return(list("nodes" = nodes, "weights" = weightsWtd))
}
# transform item parameters to the logistic metric
names(itemPara) <- c("b", "ag", "ai")
# num of items
numOfItem <- nrow(itemPara)
# num of quadratures
# numOfQuad <- numOfQuad^2
# weights and nodes
quadPoints <- expand.grid(NormalQuadraPoints(numOfQuad)$nodes, NormalQuadraPoints(numOfQuad)$nodes)
# quadPoints <- nodes
# replicate item parameter and theta
itemParaRep <-itemPara[rep(seq_len(numOfItem), each = numOfQuad^2),]
itemParaRep$thetag <- rep(quadPoints[,c(1)], each = 1, length.out = numOfQuad^2*numOfItem)
itemParaRep$thetai <- rep(quadPoints[,c(2)], each = 1, length.out = numOfQuad^2*numOfItem)
# calculate information by theta
itemParaRep <- within(itemParaRep, {
P = 0 + (1 - 0) / (1 + exp(-(ag*thetag + ai*thetai + b)))
Q = 1 - P
PQ = P * Q
# info = 1.702**2 * a**2 * P * Q
})
#### covariance -------------------
itemParaRep$ItemNum <- rep(1:numOfItem, each = numOfQuad^2)
itemParaRep <- itemParaRep[,c("thetag", "thetai", "P", "ItemNum")]
Pi <- reshape(itemParaRep, idvar = c("thetag", "thetai"), timevar = "ItemNum", direction = "wide")
Pi
}
### true score variance approach -------------------------------------
itemParaAggr1 <- FX_BF(itemPara1)
itemParaAggr1 <- itemParaAggr1[,c("thetag", "thetai", "P", "Q", "PQ")]
names(itemParaAggr1) <- c("thetag", "theta2", "P2", "Q2", "PQ2")
itemParaAggr2 <- FX_BF(itemPara2)
itemParaAggr2 <- itemParaAggr2[,c("thetag", "thetai", "P", "Q", "PQ")]
names(itemParaAggr2) <- c("thetag", "theta3", "P3", "Q3", "PQ3")
itemParaAggr3 <- FX_BF(itemPara3)
itemParaAggr3 <- itemParaAggr3[,c("thetag", "thetai", "P", "Q", "PQ")]
names(itemParaAggr3) <- c("thetag", "theta4", "P4", "Q4", "PQ4")
names(nodesM) <- c("thetag", "theta2", "theta3", "theta4", "weightsWtd")
nodesM <- merge(x = nodesM, y = itemParaAggr1, by = c("theta2", "thetag"), all.x = TRUE)
nodesM <- merge(x = nodesM, y = itemParaAggr2, by = c("theta3", "thetag"), all.x = TRUE)
nodesM <- merge(x = nodesM, y = itemParaAggr3, by = c("theta4", "thetag"), all.x = TRUE)
nodesM <- within(nodesM, {
Psum =P2 + P3 + P4
PQsum = PQ2 + PQ3 + PQ4
})
muT <- sum(nodesM$weightsWtd * nodesM$Psum)
muT
varianceTrueY <- sum(nodesM$weightsWtd * (nodesM$Psum - muT)^2)
varianceTrueY
varianceErrorY <- sum(nodesM$PQsum * nodesM$weightsWtd)
varianceErrorY
varianceObsY <- varianceErrorY + varianceTrueY
varianceObsY
itemParaAggrItem1 <- FX_BF_Item(itemPara1)
itemParaAggrItem2 <- FX_BF_Item(itemPara2)
itemParaAggrItem3 <- FX_BF_Item(itemPara3)
View(itemParaAggrItem1)
itemParaAggrItem <- rbind(itemParaAggrItem1, itemParaAggrItem2, itemParaAggrItem3)
itemParaAggrItem$var <- itemParaAggrItem$Pwtd * (1 - itemParaAggrItem$Pwtd)
sumItemVar2 <- sum(itemParaAggrItem$var)
sumItemVar2
sumItemVar <- sum(itemParaAggrItem$PQwtd)
sumItemVar
cronbachAlphaM <- 31/(31-1) * (1-sumItemVar2/varianceObsY)
cronbachAlphaM
sumItemVar2
sumItemVar
# Marginal Reliability
#### simple structure MLE&EAP  P method ----------
## MLE ---------------------------------------
# number of factors
numOfFactors <- 3
# Form A
# scoSS_MLE <- read.table("TestData/SpanishLit_sco_A_SS_MLE.txt")[,c(4:9, 10, 12, 15)]
# cor <- c(0.9067069, # 1&2
#          0.6994119, # 1&3
#          0.4891160) # 2&3
# Form B
scoSS_MLE <- read.table("TestData/SpanishLit_sco_B_SS_MLE.txt")[,c(4:9, 10, 12, 15)]
cor <- c(0.9722234, # 1&2
0.5602197, # 1&3
0.4795721) # 2&3
# Form Test
# scoSS_MLE <- read.table("TestData/SpanishLit-sco-test.txt")[,c(4:9, 10, 12, 15)]
# cor <- c(0.91, # 1&2
#          0.71, # 1&3
#          0.51) # 2&3
# change variable name
names(scoSS_MLE) <- c("theta1", "theta2", "theta3", "se1", "se2", "se3", "var1", "var2", "var3")
# delete observations with missing values, 99.99 for flexMIRT output
scoSS_MLE[scoSS_MLE == 99.99] <- NA
scoSS_MLE <- na.omit(scoSS_MLE)
# composite error variance
scoSS_MLE <- transform( scoSS_MLE,
varC = var1 + var2 + var3,# + 2 *cor[1] * se1 * se2 + 2 *cor[2] * se1 * se3 + 2 *cor[3] * se2 * se3,
thetaSum = theta1 + theta2 + theta3
)
var(scoSS_MLE$theta1)
mean(scoSS_MLE$var1)
var(scoSS_MLE$theta2)
mean(scoSS_MLE$var2)
var(scoSS_MLE$theta3)
mean(scoSS_MLE$var3)
# average of error variance
ErrorVarAvg <- mean(scoSS_MLE$varC)
ErrorVarAvg
# 3.733342
ThetaEstVar <- var(scoSS_MLE$thetaSum)
ThetaEstVar
# 8.928242
# TrueVar <- numOfFactors
TrueVar <- 2*(sum(cor)) + numOfFactors
TrueVar
r3 <- TrueVar/ThetaEstVar
r3
r4 <- 1 - ErrorVarAvg/ThetaEstVar
r4
r5 <- TrueVar/(TrueVar+ErrorVarAvg)
r5
VarTheta1 <- var(scoSS_MLE$theta1)
VarTheta2 <- var(scoSS_MLE$theta2)
VarTheta3 <- var(scoSS_MLE$theta3)
VarTheta1 + VarTheta2 + VarTheta3
set1 <- sqrt(VarTheta1)
set2 <- sqrt(VarTheta2)
set3 <- sqrt(VarTheta3)
ThetaEstVar2 <- VarTheta1 + VarTheta2 + VarTheta3 + 2 *cor[1] * set1 * set2 + 2 *cor[2] * set1 * set3 + 2 *cor[3] * set2 * set3
ThetaEstVar2
# 13.2846
# marginal reliability approach
MarginalRelSSMIRT_MLE_P <- ErrorVarAvg /(ErrorVarAvg + numOfFactors + 2*(sum(cor))) # var(e)/(var(e) + var(theta))
(2*(sum(cor)) + numOfFactors)  /(2*(sum(cor)) + numOfFactors + ErrorVarAvg)
MarginalRelSSMIRT_MLE_P <- (ThetaEstVar2 - ErrorVarAvg) /ThetaEstVar2
# coefficients
MarginalRelSSMIRT_MLE_P
scoSS_MLE
cutscore <- 0
theta <- scoSS_MLE$thetaSum
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon)))
cutscore <- 0
theta <- scoSS_MLE$thetaSum
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
cutscore <- 1
theta <- scoSS_MLE$thetaSum
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
cutscore <- 2
theta <- scoSS_MLE$thetaSum
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
cutscore <- 2
theta <- scoSS_EAP$thetaSum
sem <- sqrt(scoSS_EAP$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
ans$Marginal
hist(theta)
cutscore <- 0
theta <- scoSS_MLE$thetaSum
hist(theta)
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
cutscore <- 4
theta <- scoSS_MLE$thetaSum
hist(theta)
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
cutscore <- 6
theta <- scoSS_MLE$thetaSum
hist(theta)
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
cutscore <- -2
theta <- scoSS_MLE$thetaSum
hist(theta)
sem <- sqrt(scoSS_MLE$varC)
os<-theta
nn<-length(os)  # nn, number of examinee
nc <- length(cutscore)  # number of cutscore
if(nn != length(sem)) stop("Ability and se of different length")
esacc<-matrix(NA,length(cutscore), nn, dimnames = list(paste("cut at",round(cutscore,3)), round(os,3)))
escon <-esacc
j=1 # test
cuts<-c(-Inf, cutscore[j], Inf)
categ<-cut(os,cuts,labels=FALSE,right=FALSE) # cut function in r
for(i in 1:nn) {
esacc[j,i]<-(pnorm(cuts[categ[i]+1],os[i],sem[i])-pnorm(cuts[categ[i]],os[i],sem[i]))
escon[j,i]<-((pnorm(cuts[2], os[i],sem[i]) - pnorm(cuts[1],os[i],sem[i]))^2	+ (pnorm(cuts[3], os[i],sem[i]) - pnorm(cuts[2],os[i],sem[i]))^2	 )
}
ans<- (list("Marginal" = cbind("Accuracy" = rowMeans(esacc), "Consistency" = rowMeans(escon)), "Conditional" = list("Accuracy" =t(esacc), "Consistency" = t(escon))))
ans$Marginal
