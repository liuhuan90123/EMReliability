RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
# select reliability values not equal to 1, and larger than 0
RelMLEPolyDat <- RelMLEPolyDat[RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1,]
# return results
return(list("kValue" = RelMLEPolyDat$kValue, "RelMLEPoly" = RelMLEPolyDat$V1))
RelMLEPolyDat$V1
source("R/RelIRTPoly.R") # itemPara
source("R/RelIRTPoly_new.R") # itemPara
source("R/RelIRTPoly_new.R") # itemPara
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
RelEAPPoly_B
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
RelEAPPoly_B
itemPara <- itemPara_A
convTable <- convTable_A
K <- 20
estType <- "MLE"
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara, convTable, K, "MLE")$CSSEMPolyMLE
# weight
cssemMLEPolyDat$wt <- sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)) / sum(sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)))
# sum(cssemMLEPolyDat$wt)
# # unnormalized weights
# weightsUnwtd <- sapply(nodes, FUN = function(x) dnorm(x))
#
# # normalized weightes
# weightsWtd <- weightsUnwtd / sum(weightsUnwtd)
# # raw score
# cssemMLEPolyDat$rawScore <- c(0:nrow(itemPara))
#
# # merge data
# cssemMLEPolyDat <- merge(cssemMLEPolyDat, rawFreq, by = "rawScore")
#
# # weight
# cssemMLEPolyDat$wt <- cssemMLEPolyDat$freq / sum(cssemMLEPolyDat$freq)
# SS variance
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
# for loop to calculate reliability for scale score
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
# select reliability values not equal to 1, and larger than 0
RelMLEPolyDat <- RelMLEPolyDat[RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1,]
RelMLEPolyDat$V1
source("R/RelIRTPoly_new.R") # itemPara
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
View(convTable_A)
View(convTable_A_Poly)
source("R/RelIRTPoly_new.R") # itemPara
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
CSSEMIRTPoly(itemPara, convTable, K, "MLE")$CSSEMPolyMLE
# cssem using Polynomial method
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara, convTable, K, "MLE")$CSSEMPolyMLE
# weight
cssemMLEPolyDat$wt <- sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)) / sum(sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)))
cssemMLEPolyDat
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
SSVar
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
RelMLEPolyDat
source("R/RelIRTPoly_new.R") # itemPara
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B, 20, "MLE")
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A, 20, "EAP")
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B, 20, "EAP")
RelEAPPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A, 20, "EAP")
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B, 20, "EAP")
RelEAPPoly_B
RelMLEPoly_A_t <- RelIRTPoly(itemPara_A, convTable_A, 20, "MLE")
RelMLEPoly_A_t
RelMLEPoly_A_t <- RelIRTPoly(itemPara_A, convTable_A, 20, "MLE", rawData_A)
RelMLEPoly_A_t
RelMLEPoly_A_t <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A_t
source("R/RelIRTPoly_new.R") # itemPara
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_A_t <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A_t
RelMLEPoly_A_t <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A_t
View(convTable_A)
View(convTable_A_Poly)
itemPara <- itemPara_A
convTable <- convTable_A
# convTable <- convTable_A_Poly
K <- 20
estType <- "MLE"
View(convTable_A)
View(convTable)
# cssem using Polynomial method
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara, convTable, K, "MLE")$CSSEMPolyMLE
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara, convTable, K, "MLE")$CSSEMPolyMLE
# weight
cssemMLEPolyDat$wt <- sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)) / sum(sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)))
# SS variance
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
# for loop to calculate reliability for scale score
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
# select reliability values not equal to 1, and larger than 0
RelMLEPolyDat <- RelMLEPolyDat[RelMLEPolyDat$V1 > 0 & RelMLEPolyDat$V1 != 1,]
RelMLEPolyDat$V1
itemPara <- itemPara_A
# convTable <- convTable_A
convTable <- convTable_A_Poly
K <- 20
estType <- "MLE"
# cssem using Polynomial method
cssemMLEPolyDat <- CSSEMIRTPoly(itemPara, convTable, K, "MLE")$CSSEMPolyMLE
# weight
cssemMLEPolyDat$wt <- sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)) / sum(sapply(cssemMLEPolyDat$theta, FUN = function(x) dnorm(x)))
# SS variance
SSVar <- sum(cssemMLEPolyDat$wt * (cssemMLEPolyDat$roundedSS - weighted.mean(cssemMLEPolyDat$roundedSS, cssemMLEPolyDat$wt))^2)
RelMLEPolyDat <- as.data.frame(matrix(nrow = K, ncol = 1))
for(i in 1:K){
errorVar <- eval(parse(text=(paste("sum(cssemMLEPolyDat$cssemPolyk", i, "^2 * cssemMLEPolyDat$wt)", sep = ""))))
RelMLEPolyDat[i,1] <- 1 - errorVar/SSVar
}
RelMLEPolyDat$kValue <- 1:K
RelMLEPolyDat$V1
View(convTable_A)
View(convTable_A_Poly)
cssemMLEPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE")
cssemMLEPoly_A
cssemMLEPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE")
cssemMLEPoly_A
cssemMLEPoly_A <- CSSEMIRTPoly(itemPara_A, convTable_A, 20, "MLE")
cssemMLEPoly_A
itemPara <- itemPara_A
convTable <- convTable_A
K <- 20
estType <- "MLE"
# CSEM MLE
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable, by = "theta")
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
# call PM function
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, K)
# change variable name
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'rawScore'] <- 'theta'
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'csem'] <- 'csemMLE'
# theta
theta <- convTable$theta
# CSEM MLE
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable, by = "theta")
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
# call PM function
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, K)
# change variable name
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'rawScore'] <- 'theta'
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'csem'] <- 'csemMLE'
cssemPolyMLE$CSSEMPoly
itemPara <- itemPara_A
convTable <- convTable_A_Poly
K <- 20
estType <- "MLE"
# theta
theta <- convTable$theta
# CSEM MLE
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable, by = "theta")
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
# call PM function
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, K)
# change variable name
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'rawScore'] <- 'theta'
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'csem'] <- 'csemMLE'
cssemPolyMLE$CSSEMPoly
itemParaCSEM
itemPara <- itemPara_A
convTable <- convTable_A
K <- 20
estType <- "MLE"
# theta
theta <- convTable$theta
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable, by = "theta")
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
# call PM function
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, K)
# change variable name
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'rawScore'] <- 'theta'
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'csem'] <- 'csemMLE'
itemParaCSEM
itemParaCSEM
itemPara <- itemPara_A
convTable <- convTable_A_Poly
K <- 20
estType <- "MLE"
# theta
theta <- convTable$theta
as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
# CSEM MLE
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
itemParaCSEM
convTable
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable, by = "theta")
itemParaCSEM
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
itemParaCSEM
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, K)
cssemPolyMLE
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'rawScore'] <- 'theta'
names(cssemPolyMLE$CSSEMPoly)[names(cssemPolyMLE$CSSEMPoly) == 'csem'] <- 'csemMLE'
cssemPolyMLE
cssemPolyMLE$CSSEMPoly
cssemPolyMLE$RSquared
itemPara <- itemPara_A
convTable <- convTable_A
K <- 20
estType <- "MLE"
# theta
theta <- convTable$theta
# CSEM MLE
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara, "MLE"))
itemParaCSEM
convTable
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable, by = "theta")
itemParaCSEM
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
itemParaCSEM
# call PM function
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, K)
cssemPolyMLE
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B, 20, "MLE")
RelMLEPoly_B
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "MLE")
RelMLEPoly_B
# theta
theta <- convTable_B$theta
# CSEM MLE
itemParaCSEM <- as.data.frame(CSEMIRT(theta, itemPara_B, "EAP"))
# merge data
itemParaCSEM <- merge(itemParaCSEM, convTable_B_Poly, by = "theta")
# change name to fit Polynomial Method function
names(itemParaCSEM) <- c("rawScore", "csem", "roundedSS")
# call PM function
cssemPolyMLE <- PolynomialMethod(itemParaCSEM, 20)
cssemDat <- itemParaCSEM
K <- 20
# create data frame to store r square
rSquaredDat <- as.data.frame(matrix(nrow = K, ncol = 1))
regCoefDat <- list()
# for loop to iterate different k
for (k in 1:K){
# fit model with k
modelK <- lm(roundedSS ~ poly(rawScore, k, raw=TRUE), cssemDat)
# extract regression coefficients
regCoef <- summary(modelK)$coefficients[, 1]
regCoefDat[[k]] <- summary(modelK)$coefficients
# extract r square coefficient
rSquaredDat[k, 1]<- summary(modelK)$r.squared
# check whether regression coefficient of highest order is missing
if(is.na(regCoef[k+1])){
message(paste("The maximum k accepted is", k-1, sep = " "))
break
}
# calculate transformation coefficients fx: from 1 to K
cssemDat$fx <- 0
i <- k
while(i > 1){
cssemDat$fx <- cssemDat$fx +  regCoef[i+1] * (i * cssemDat$rawScore^(i-1))
i <- i-1
}
cssemDat$fx <- cssemDat$fx + regCoef[i+1]
# calculate cssem using polynomial method
cssemDat$cssemPoly <- cssemDat$fx * cssemDat$csem
# rename variable with indicator k
names(cssemDat)[names(cssemDat) == 'cssemPoly'] <- paste("cssemPolyk", k, sep = "")
}
# return(list("RSquared" = as.matrix(rSquaredDat[1:k,]), "CSSEMPoly" = cssemDat))
regCoefDat[[4]]  ## get coefficients for k = 4
# # SS formula
#
# SS = 118.263733790 + 3.909028972 * x -0.360085771 * x^2 -0.036053623 * x^3 + 0.009014156 * x^4
#
# f=expression(118.263733790 + 3.909028972 * x -0.360085771 * x^2 -0.036053623 * x^3 + 0.009014156 * x^4)
# D(f,'x')
#
#
# # CSSEM formula
#
# CSSEM = 3.909028972 - 0.360085771 * (2 * x) - 0.036053623 * (3 * x^2) + 0.009014156 * (4 * x^3)
# SS formula
# names(itemParaCSEM) <- c("theta", 'csemMLE',"scaleScore")
# theta
theta_New <- NormalQuadraPoints(41)$nodes
weights_New <- NormalQuadraPoints(41)$weights
# CSEM MLE
itemParaCSEM_New <- as.data.frame(CSEMIRT(theta_New, itemPara_B, "EAP"))
# itemParaCSEM_New <- within(itemParaCSEM_New,{
#   scaleScoreNew =  118.35478428 + 3.92088450 * theta -0.47021240 * theta^2 -0.03740998 * theta^3 + 0.01328610 * theta^4
#   cssemNew = 3.92088450 -0.47021240 * (2 * csemMLE) -0.03740998  * (3 * csemMLE^2) + 0.01328610 * (4 * csemMLE^3)
#   roundedSS = round(scaleScoreNew)
# })
# form B
itemParaCSEM_New <- within(itemParaCSEM_New,{
scaleScoreNew =  118.35478428 + 3.92088450 * theta -0.47021240 * theta^2 -0.03740998 * theta^3 + 0.01328610 * theta^4
cssemNew = 3.92088450 -0.47021240 * (2 * csemEAP) -0.03740998  * (3 * csemEAP^2) + 0.01328610 * (4 * csemEAP^3)
roundedSS = scaleScoreNew
})
# form A
# itemParaCSEM_New <- within(itemParaCSEM_New,{
#   scaleScoreNew =  118.263733790 + 3.909028972 * theta -0.360085771 * theta^2 -0.036053623 * theta^3 + 0.009014156 * theta^4
#   cssemNew = 3.909028972 -0.360085771 * (2 * csemMLE) -0.036053623  * (3 * csemMLE^2) + 0.009014156 * (4 * csemMLE^3)
#   roundedSS = round(scaleScoreNew)
# })
### read new posterior distribution rates
postDist <- read.table("TestData/PosteriorDistribution.txt", sep = " ")
plot(postDist$V1, postDist$V2)
itemParaCSEM_New$weights_new <- postDist$V2
# SS variance
SSVar <- sum(itemParaCSEM_New$weights_new * (itemParaCSEM_New$roundedSS - weighted.mean(itemParaCSEM_New$roundedSS, itemParaCSEM_New$weights_new))^2)
# error variance
errorVar <- sum(itemParaCSEM_New$cssemNew * itemParaCSEM_New$weights_new)
# reliability
RelMLEPolyNew <- 1 - errorVar/SSVar
RelMLEPolyNew
source("R/RelIRTPoly_new.R") # itemPara
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "MLE")
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A, 20, "EAP")
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B, 20, "EAP")
RelEAPPoly_B
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE")
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly(itemPara_A, convTable_A, 20, "EAP")
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly(itemPara_B, convTable_B, 20, "EAP")
RelEAPPoly_B
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly(itemPara_A, convTable_A, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly(itemPara_B, convTable_B, 20, "EAP", rawData_B)
RelEAPPoly_B
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
RelEAPPoly_B
source("R/RelIRTPoly_new.R") # itemPara
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
### Results for project ------------------
# source("R/NormalQuadraPoints.R") # n set as 41
# source("R/Info.R")
# source("R/LordWingersky.R")
# source("R/CronbachAlpha.R") # raw data
# source("R/Feldt.R")
# source("R/MarginalRelMLE.R") # itemPara
# source("R/MarginalRelEAP.R") # itemPara
# source("R/TestRelIRT.R") # itemPara
# source("R/KolenRelIRT.R") # itemPara, convTable
# source("R/CSEMLord.R") # numer of item
# source("R/PolynomialMethod.R") # cssemDat, K=num of degree
# source("R/CSSEMPolynomial.R") # numOfItem, convTable, K
# source("R/CSEMLord.R") # number of item
# source("R/CSSEMMLEPoly.R") # itemPara, convTable, K
# source("R/CSSEMEAPPoly.R") # itemPara, convTable, K
# source("R/CSEMLord.R") # numer of item
# source("R/CSSEMBinomial.R") # numer of item
# source("R/CSSEMPolynomial.R") # numOfItem, convTable, K
# source("R/CSEMIRT.R") # itemPara
# source("R/CSSEMIRT.R") # itemPara, convTable
# load library
library(EMReliability)
# read raw data
rawData_A <- read.table("TestData/RawDataFormX.txt")
rawData_B <- read.table("TestData/RawDataFormY.txt")
# read item parameters from txt file
itemPara_A <- read.table("TestData/ItemParaFormX.txt")
names(itemPara_A) <- c("b", "a")
itemPara_A[,"a"] <- itemPara_A[,"a"]/1.702
itemPara_B <- read.table("TestData/ItemParaFormY.txt")
names(itemPara_B) <- c("b", "a")
itemPara_B[,"a"] <- itemPara_B[,"a"]/1.702
# read conversion tables
convTable_A <- read.csv("TestData/ConversionTableFormX.csv")
convTable_A$roundedSS <- round(convTable_A$unroundedSS)
convTable_B <- read.csv("TestData/ConversionTableFormY.csv")
convTable_B$roundedSS <- round(convTable_B$unroundedSS)
convTable_A_Poly <- convTable_A[,c("theta", "roundedSS")]
convTable_B_Poly <- convTable_B[,c("theta", "roundedSS")]
# test help functions ------------------------------------
NormalQuadraPoints(41)
LordWingersky(c(0.9,0.9,0.9))
Info(NormalQuadraPoints(41)$nodes, itemPara_A, "EAP")
# CronbachAlpha & GT
CronbachAlpha_A <- CronbachAlpha(rawData_A)
CronbachAlpha_A
CronbachAlpha_B <- CronbachAlpha(rawData_B)
CronbachAlpha_B
# Feldt
Feldt_A <- Feldt(rawData_A)
Feldt_A
Feldt_B <- Feldt(rawData_B)
Feldt_B
# test reliability IRT
TestRelIRT_A <- TestRelIRT(itemPara_A)
TestRelIRT_A
TestRelIRT_B <- TestRelIRT(itemPara_B)
TestRelIRT_B
# marginal reliability MLE
MarginalRelMLE_A <- MarginalRelIRT(itemPara_A, "MLE")
MarginalRelMLE_A
MarginalRelMLE_B <- MarginalRelIRT(itemPara_B, "MLE")
MarginalRelMLE_B
# marginal reliability EAP
MarginalRelEAP_A <- MarginalRelIRT(itemPara_A, "EAP")
MarginalRelEAP_A
MarginalRelEAP_B <- MarginalRelIRT(itemPara_B, "EAP")
MarginalRelEAP_B
# Kolen's method
KolenRelIRT_A <- KolenRelIRT(itemPara_A, convTable_A)
KolenRelIRT_A
KolenRelIRT_B <- KolenRelIRT(itemPara_B, convTable_B)
KolenRelIRT_B
RelMLEPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "MLE", rawData_A)
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "MLE", rawData_B)
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly(itemPara_A, convTable_A_Poly, 20, "EAP", rawData_A)
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly(itemPara_B, convTable_B_Poly, 20, "EAP", rawData_B)
RelEAPPoly_B
# Reliability for rounded SS using polynomial method
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "MLE")
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "EAP")
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "EAP")
RelEAPPoly_B
RelMLEPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "MLE")
RelMLEPoly_A
RelMLEPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "MLE")
RelMLEPoly_B
RelEAPPoly_A <- RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "EAP")
RelEAPPoly_A
RelEAPPoly_B <- RelIRTPoly_new(itemPara_B, convTable_B_Poly, 20, "EAP")
RelEAPPoly_B
RelIRTPoly_new(itemPara_A, convTable_A_Poly, 20, "EAP")
